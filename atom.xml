<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bugly技术团队博客</title>
  <subtitle>一种愉悦的开发方式</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://buglydevteam.github.io/"/>
  <updated>2017-02-23T09:36:57.000Z</updated>
  <id>https://buglydevteam.github.io/</id>
  
  <author>
    <name>Bugly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git工作流的一些经验分享</title>
    <link href="https://buglydevteam.github.io/2017/02/23/share-the-experiences-of-git-workflow/"/>
    <id>https://buglydevteam.github.io/2017/02/23/share-the-experiences-of-git-workflow/</id>
    <published>2017-02-23T09:10:21.000Z</published>
    <updated>2017-02-23T09:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者使用git有一段时间了，踩过不少坑，这里分享下我在git工作流方面的一些经验。</p>
<h2 id="什么是Git工作流？"><a href="#什么是Git工作流？" class="headerlink" title="什么是Git工作流？"></a>什么是Git工作流？</h2><p>Git工作流你可以理解为工作中团队成员遵守的一种代码管理方案，在Git中有以下几种工作流方案作为方案指导：</p>
<ul>
<li>集中式工作流</li>
<li>功能开发工作流</li>
<li>Gitflow工作流</li>
<li>Forking工作流</li>
</ul>
<p>下面针对性说下每个工作流可能使用到的场景和适用性：</p>
<p><strong>集中式工作流</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2017-02-23/1487161222036.png" alt="集中式工作流" title="">
                </div>
                <div class="image-caption">集中式工作流</div>
            </figure>
<p>这种工作方式跟svn类似，它只有一个master分支，开发者会先把远程的仓库克隆到本地，之后的修改和提交都在本地操作，直到在某个合适的时间点将本地的代码合入到远程master。这种工作流比较<strong>适合小团队</strong>，因为小团队可能不会太多的协作和合流的动作。</p>
<p><strong>功能开发工作流</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2017-02-23/1487170001879.png" alt="功能开发工作流" title="">
                </div>
                <div class="image-caption">功能开发工作流</div>
            </figure>
<p>这种工作流关注功能开发，不直接往master提交代码保证它是稳定并且干净的，而是从master拉取feature分支进行功能开发，团队成员根据分工拉取不同的功能分支来进行不同的功能开发，这样就可以完全隔离开每个人的工作。当功能开发完成后，会向master分支发起Pull Request，只有审核通过的代码才真正允许合入master，这样就加强了团队成员之间的代码交流，也就是我们常说的Code Review。</p>
<p><strong>Gitflow工作流</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2017-02-23/1487170152978.png" alt="Gitflow工作流" title="">
                </div>
                <div class="image-caption">Gitflow工作流</div>
            </figure>
<p>这个工作流其实也是我们团队采用的工作流，这也是很多团队会采用的工作流，它会相对复杂一点，但它非常适合用来管理大型项目的发布和维护，后面笔者也会详细讲下这一块。贯穿整个开发周期，master和develop分支是一直存在的，master分支可以被视为稳定的分支，而develop分支是相对稳定的分支，特性开发会在feature分支上进行，发布会在release分支上进行，而bug修复则会在hotfix分支上进行。笔者也是花了不少时间才熟练掌握整个工作流，期间遇到不少坑，后面会跟大家分享下。</p>
<p><strong>Forking工作流</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2017-02-23/1487171732444.png" alt="Forking工作流" title="">
                </div>
                <div class="image-caption">Forking工作流</div>
            </figure>
<p>Forking工作流对于开源项目贡献者一定不陌生了，它有一个公开的中央仓库，其他贡献者可以Fork（克隆）这个仓库作为你自己的私有仓库，开源项目维护者可以直接往中央仓库push代码，而代码贡献者只能将代码push到自己的私有仓库，只有项目维护者接受代码贡献者往中央仓库发起的pull request才会真正合入。</p>
<p><strong>小结一下</strong></p>
<p>上面已经大致讲了在git当中的四种比较常见的工作流，都是需要开发者去实践理解的。</p>
<p>关于git工作流，只有选用最合适自己团队的工作流才能有效的提高开发效率，上面提到的一些工作流模式都有各自的适用场景，如何选用适合自己团队的工作流得结合团队成员的实际情况，看团队成员对于工作流的理解程度，还有对于工作流的执行程度。</p>
<h2 id="我们团队的一些实践"><a href="#我们团队的一些实践" class="headerlink" title="我们团队的一些实践"></a>我们团队的一些实践</h2><p>现在讲下我们团队针对Gitflow的一些实践：</p>
<p><strong>master分支</strong></p>
<ul>
<li>主分支</li>
<li>保持稳定</li>
<li>不允许直接往这个分支提交代码，只允许往这个分支发起merge request</li>
<li>只允许release分支和hotfix分支进行合流</li>
</ul>
<p><strong>develop分支</strong></p>
<ul>
<li>开发分支</li>
<li>相对稳定的分支</li>
<li>用于日常开发，包括代码优化、功能性开发</li>
</ul>
<p><strong>feature分支</strong></p>
<ul>
<li>特性分支</li>
<li>从develop分支拉取，用于下个迭代版本的功能特性开发</li>
<li>功能开发完毕合并到develop分支</li>
</ul>
<p><strong>release分支</strong></p>
<ul>
<li>发布分支</li>
<li>从develop分支拉取</li>
<li>用于回归测试，bug修复</li>
<li>发布完成后打tag并合入master和develop</li>
</ul>
<p><strong>hotfix分支</strong></p>
<ul>
<li>热更新分支</li>
<li>从develop分支拉取</li>
<li>用于紧急修复上线版本的问题</li>
<li>修复后打tag并合入master和develop</li>
</ul>
<p>大家可能会发现我们这个跟标准的Gitflow工作流有些差别，其实也没有什么标准不标准的，前面说到要结合团队的实际情况，我们团队对于目前所采用的工作方式都是达成共识的，所以有一些差异并没有关系。</p>
<p>说了这么久，还没有一句git命令，那就让大家感受一下吧（感谢Bugly小色熊整理）：</p>
<p> 1). 首先将远程代码拉取到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone xxx</div><div class="line">git checkout -b develop origin/develop</div></pre></td></tr></table></figure>
<p> 2).新建feature分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b feature</div></pre></td></tr></table></figure>
<p> 3).多人在feature上开发，如果中途需要将develop的变更合入feature，所有人需要将本地的代码变更提交到远程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch origin </div><div class="line">git rebase origin/feature</div><div class="line">git push origin feature</div></pre></td></tr></table></figure>
<p> 然后由feature负责人rebase develop分支，删除原来feature分支，重新新建feature分支；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git rebase origin/feature</div><div class="line">git rebase develop</div><div class="line">git push origin :feature</div><div class="line">git push origin feature</div></pre></td></tr></table></figure>
<p> 这样可以保证feature保持线性变更；</p>
<p> 4).feature开发完成后，所有人需要将本地的代码变更提交到远程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch origin </div><div class="line">git rebase origin/feature</div><div class="line">git push origin feature</div></pre></td></tr></table></figure>
<p> 然后由feature负责人rebase develop分支，然后将feature分支合入develop，删除feature；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git rebase origin/feature</div><div class="line">git rebase develop</div><div class="line">git checkout develop</div><div class="line">git merge feature</div><div class="line">git push origin :feature</div></pre></td></tr></table></figure>
<p> 这样可以保证develop保持线性变更，各feature的变更完整可追溯；<br> 5).合入feature后拉出对应的release/feature分支，后续bug修复在release/feature上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git checkout -b release/feature</div></pre></td></tr></table></figure>
<p> release/feature分支的同步合并与feature分支相同<br> 6).release/feature分支bug修复完成后，拉取对应的tag推送远程进行发布</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -a v1.0 -m &apos;feature发布&apos;</div><div class="line">git push origin v1.0</div></pre></td></tr></table></figure>
<p> 之后将release/feature合入develop分支，然后删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git rebase develop</div><div class="line">git checkout develop</div><div class="line">git merge release/feature</div><div class="line">git push origin :release/feature</div></pre></td></tr></table></figure>
<p> 7).发布完成后将release合入master分支，保证master为最新稳定版本（实际操作为发起merge request）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章主要针对笔者工作中对于git工作流的一些理解和实践，目前我们团队也是严格按照这样的工作流来完成日常的开发工作，一个让团队成员认可并且有效的工作流才是最适合我们的工作流，任何规则不是为了限制我们思考，而是为了让工作更加高效有序，尽量减少人为的失误。git是一个博大精深的东西，笔者也是不断在实际应用中去理解它，任何一门技术的学习也是这样，就像程序员常用来装逼的一首诗：</p>
<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行。</p>
</blockquote>
<p>参考资料：<a href="http://blog.jobbole.com/76847/" target="_blank" rel="external">http://blog.jobbole.com/76847/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者使用git有一段时间了，踩过不少坑，这里分享下我在git工作流方面的一些经验。&lt;/p&gt;
&lt;h2 id=&quot;什么是Git工作流？&quot;&gt;&lt;a href=&quot;#什么是Git工作流？&quot; class=&quot;headerlink&quot; title=&quot;什么是Git工作流？&quot;&gt;&lt;/a&gt;什么是Git工
    
    </summary>
    
      <category term="经验分享" scheme="https://buglydevteam.github.io/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Git" scheme="https://buglydevteam.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Bugly热更新SDK你需要知道的一些事</title>
    <link href="https://buglydevteam.github.io/2016/11/28/bugly-android-hotfix-you-should-know/"/>
    <id>https://buglydevteam.github.io/2016/11/28/bugly-android-hotfix-you-should-know/</id>
    <published>2016-11-28T05:19:58.000Z</published>
    <updated>2016-12-03T11:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bugly出热更新SDK了？"><a href="#Bugly出热更新SDK了？" class="headerlink" title="Bugly出热更新SDK了？"></a>Bugly出热更新SDK了？</h2><p>没错，Bugly也出热更新SDK啦，2016.11.25号，我们Bugly也上线了Android版的热更新SDK，大家都知道这一年来<strong>热更新</strong>被无数次提起，各大厂自主研发的热更新方案层出不穷，下面就列举一些大家比较熟悉的一些热更新方案：</p>
<p>微信开源：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Tinker</a><br>大众点评：<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a><br>阿里巴巴：<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a><br>阿里巴巴：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a><br>美团：<a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">Robust</a></p>
<p>各个方案的优劣性笔者就不在这里做过多讨论了，总的一句话<strong>没有最好的，只有最适合自己的</strong>。</p>
<p><strong>我们Bugly也是出于高可用性的考虑，Tinker支持动态下发代码、So库以及资源，所以我们最终选择了Tinker方案作为我们SDK的一项能力。</strong></p>
<p>这里有一点需要说明的，<strong>Android版的热更新SDK是包含在升级SDK里面的</strong>，所以如果你想使用我们提供的热更新能力需要下载对应版本的<a href="https://bugly.qq.com/v2/sdkDownload" target="_blank" rel="external">升级SDK</a>，目前我们在1.2.0版本才开始支持热更新：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2016-11-28/hotfix-0.png" alt="热更新SDK" title="">
                </div>
                <div class="image-caption">热更新SDK</div>
            </figure>
<font color="red">注意：升级SDK自1.2.0起将不再支持以jar包形式集成，我们建议您使用Android studio并且以gradle方式集成。</font>

<h2 id="为什么集成我们Bugly热更新SDK？"><a href="#为什么集成我们Bugly热更新SDK？" class="headerlink" title="为什么集成我们Bugly热更新SDK？"></a>为什么集成我们Bugly热更新SDK？</h2><p>热更新能力是Bugly为解决开发者紧急修复线上Bug，而无需重新发版让用户无感知就能把问题修复的一项能力。Bugly目前采用<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">微信Tinker</a>的开源方案，开发者只需要集成我们提供的SDK就可以实现<strong>自动下载补丁包、合成、并且应用补丁的功能</strong>，我们也提供了<strong>热更新管理后台</strong>让开发者对每个版本的补丁进行管理。</p>
<p>集成我们SDK的好处是显而易见的：</p>
<ul>
<li>无需关注Tinker是如何合成补丁的</li>
<li>无需自己搭建补丁管理后台</li>
<li>无需考虑后台下发补丁策略的任何事情</li>
<li>无需考虑补丁下载合成的时机，处理后台下发的策略</li>
<li>我们提供了更加方便集成Tinker的方式</li>
<li>我们提供应用升级一站式解决方案</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2016-11-28/hotfix-1.png" alt="应用升级" title="">
                </div>
                <div class="image-caption">应用升级</div>
            </figure>
<h2 id="如何集成Bugly热更新SDK？"><a href="#如何集成Bugly热更新SDK？" class="headerlink" title="如何集成Bugly热更新SDK？"></a>如何集成Bugly热更新SDK？</h2><blockquote>
<p>看文档、看文档、看文档。重要的事情说三遍。<br><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/" target="_blank" rel="external">Android热更新接入指南</a></p>
</blockquote>
<p>相信接入过Tinker的同学会发现使用Tinker还是有一定门槛的，小白用户第一次使用可能会懵圈，我们Bugly也希望能让第一次接入的同学能顺利使用上热更新，所以建议大家严格按照我们文档的流程来接入，如果遇到任何使用SDK的问题可以及时跟我们反馈（交流群号：130979883），但如果是Tinker插件的使用问题也是建议您认真查看<a href="https://github.com/Tencent/tinker/wiki" target="_blank" rel="external">Tinker Wiki</a>。</p>
<p>简单概要说一下整个接入流程：</p>
<ol>
<li>配置插件依赖（这里包含<strong>tinker插件</strong>和<strong>tinker-support插件</strong>的依赖）</li>
<li>apply插件（这里可以只配置<code>apply plugin: &#39;com.tencent.bugly.tinker-support&#39;</code>）</li>
<li><p>集成SDK</p>
<ul>
<li>集成远程SDK仓库</li>
<li>重新自定义Application、ApplicationLike</li>
<li>AndroidManifest配置</li>
<li>混淆配置</li>
</ul>
</li>
<li><p>测试验证</p>
<ul>
<li>打基准包安装并上报联网（注：填写唯一的tinkerId）</li>
<li>对基准包的bug修复（可以是Java代码变更，资源的变更）</li>
<li>修改基准包路径、填写补丁包tinkerId、mapping文件路径、resId文件路径</li>
<li>执行tinkerPatchRelease打Release版本补丁包</li>
<li>选择app/build/outputs/patch目录下的补丁包并上传（注：不要选择tinkerPatch目录下的补丁包，不然上传会有问题）</li>
<li>编辑下发补丁规则，点击<strong>立即下发</strong></li>
<li>重启基准包，请求补丁策略（SDK会自动下载补丁并合成）</li>
<li>再次重启基准包，检验补丁应用结果</li>
</ul>
</li>
</ol>
<p>以上是应用补丁的流程，有同学可能会问，如果我想撤回怎么办？这里先解释下我们补丁的几种状态：</p>
<ul>
<li>下发中</li>
<li>生效中、下发停止</li>
<li>撤回中</li>
</ul>
<p><strong>下发中</strong>：表示你上传一个补丁后，点击立即下发之后的状态，表示后台正在下发补丁策略，补丁包对应的基线版本是可以收到对应的策略的。</p>
<p><strong>生效中、下发停止</strong>：表示你已经下发过这个补丁，但因为你上传了新补丁，这个补丁下发会被停止，要注意一个目标版本只运行下发一个补丁。</p>
<p><strong>撤回中</strong>：表示你不再下发这个补丁，这个操作是不可逆的，点击撤回，基线版本将不会再收到这个补丁策略。</p>
<p><img src="/images/2016-11-28/hotfix-2.png" alt="补丁状态"></p>
<p>以上就是Bugly热更新SDK的集成方式一些说明啦，如果还有疑问直接找Bugly-kirito咨询。</p>
<h2 id="一些大家比较关注的问题"><a href="#一些大家比较关注的问题" class="headerlink" title="一些大家比较关注的问题"></a>一些大家比较关注的问题</h2><p><strong>Q：Bugly热更新会收费么？</strong></p>
<p>A：大家可以放心，我们热更新服务目前是完全免费的。</p>
<p><strong>Q：之前使用Tinker，怎么切换过来使用Bugly？</strong></p>
<p>A： 你只需在dependencies中配置一句代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &quot;com.tencent.bugly:crashreport_upgrade:1.2.0&quot;</div></pre></td></tr></table></figure>
<p>注释掉以前的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 可选，用于生成application类 </div><div class="line">   //provided(&apos;com.tencent.tinker:tinker-android-anno:1.7.5&apos;)</div><div class="line">   // tinker的核心库</div><div class="line">   // compile(&apos;com.tencent.tinker:tinker-android-lib:1.7.5&apos;)</div></pre></td></tr></table></figure>
<p>插件配置不需要更改，只需要加上我们Bugly额外的tinker-support插件即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// tinker gradle插件</div><div class="line">   classpath (&apos;com.tencent.tinker:tinker-patch-gradle-plugin:1.7.5&apos;)</div><div class="line"></div><div class="line">   // tinkersupport插件</div><div class="line">   classpath &quot;com.tencent.bugly:tinker-support:1.0.1&quot;</div></pre></td></tr></table></figure>
<p>这里建议您不要随便更改插件版本，避免因为插件的更新导致您无法正常生成我们需要的补丁包。</p>
<p><strong>Q：如果我配置了升级策略，又配置了补丁策略，会是怎样的效果？</strong></p>
<p>A：升级策略优先级会高于补丁策略，后台会优先下发升级策略。毕竟你都要升级了，热更新只是帮助你修复bug而已。</p>
<p><strong>Q：我只想使用热更新，不想使用升级？</strong></p>
<p>A：热更新是包含在升级SDK里面的，你可以不配置任何升级策略，只需按照热更新文档集成即可。</p>
<p><strong>Q：是否支持加固模式？</strong></p>
<p>A：tinker是支持加固模式的，但需要你回退到Qzone方案<br>，将<code>usePreGeneratedPatchDex</code>设置为true。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2016-11-28/hotfix-3.png" alt="Alt" title="">
                </div>
                <div class="image-caption">Alt</div>
            </figure>
<p>但要注意Tinker官方的提示：</p>
<blockquote>
<p>是否提前生成dex，而非合成的方式。这套方案即回退成Qzone的方案，对于需要使用<strong>加固或者多flavor打包(建议使用其他方式生成渠道包)的用户可使用</strong>。但是这套方案需要插桩，会造成<strong>Dalvik下性能损耗以及Art补丁包可能过大的问题，务必谨慎使用</strong>。另外一方面，这种方案在Android N之后可能会产生问题，建议过滤N之后的用户。</p>
</blockquote>
<p><strong>Q：是否支持打多Flavor的patch包</strong><br>A：支持的。你需要配置productFlavor（示例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">      xiaomi &#123;</div><div class="line">          applicationId &apos;com.tencent.bugly.hotfix.xiaomi&apos;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      yyb &#123;</div><div class="line">          applicationId &apos;com.tencent.bugly.hotfix.yyb&apos;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>打flavor包，只需要配置构建flavor的目录，其他字段不需要填写（执行tinkerPatchAllFalvorRelease就可以得到所有flavor的包）：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2016-11-28/hotfix-4.png" alt="flavor路径配置" title="">
                </div>
                <div class="image-caption">flavor路径配置</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/2016-11-28/hotfix-5.png" alt="打flavor的Task" title="">
                </div>
                <div class="image-caption">打flavor的Task</div>
            </figure>
<h2 id="总结-amp-展望"><a href="#总结-amp-展望" class="headerlink" title="总结&amp;展望"></a>总结&amp;展望</h2><p>关于Bugly热更新SDK你需要知道的一些事情，笔者已经讲完啦，如果你在使用过程中遇到任何问题可以及时跟我们反馈，我们会持续跟进优化SDK和完善接入流程，后续我们会分享更多我们Bugly关于热更新的一些技术和原理上的理解，希望本篇文章能够让使用Bugly热更新SDK的同学和想了解我们热更新的同学的有一些解惑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bugly出热更新SDK了？&quot;&gt;&lt;a href=&quot;#Bugly出热更新SDK了？&quot; class=&quot;headerlink&quot; title=&quot;Bugly出热更新SDK了？&quot;&gt;&lt;/a&gt;Bugly出热更新SDK了？&lt;/h2&gt;&lt;p&gt;没错，Bugly也出热更新SDK啦，2016
    
    </summary>
    
      <category term="Android" scheme="https://buglydevteam.github.io/categories/Android/"/>
    
    
      <category term="Bugly" scheme="https://buglydevteam.github.io/tags/Bugly/"/>
    
      <category term="热更新" scheme="https://buglydevteam.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
      <category term="Tinker" scheme="https://buglydevteam.github.io/tags/Tinker/"/>
    
  </entry>
  
</feed>
