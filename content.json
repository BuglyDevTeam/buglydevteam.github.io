{"meta":{"title":"Bugly技术团队博客","subtitle":"一种愉悦的开发方式","description":"Bugly技术团队博客，分享技术，交流思想。","author":"Bugly","url":"https://devilwwj.github.io"},"pages":[{"title":"","date":"2016-12-03T11:45:57.000Z","updated":"2015-05-21T14:56:22.000Z","comments":true,"path":"404.html","permalink":"https://devilwwj.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2015-05-19T13:31:13.000Z","updated":"2015-05-31T06:45:17.000Z","comments":true,"path":"about/index.html","permalink":"https://devilwwj.github.io/about/index.html","excerpt":"","text":"#Something about me ##个人资料性别：男 年龄：23岁个人博客：www.devilwwj.comgithub：https://github.com/devilWwjCSDN博客：http://blog.csdn.net/wwj_748毕业时间：2014.7毕业院校：华南理工大学广州学院专业：计算机科学与技术学历：本科工科学士 ##在校情况与获奖经历2011.11 被评为“三好学生“2012.11 被评为”三好学生“2013.11 被评为”三好学生“2011.2-2012.7 曾担任班长一职2012.11-2012.12 软件开发大赛三等奖|院校级平均学分绩点：3.6 2014年获工科学士学位 ##外语水平CET4 ##工作经历2013.07.18-2014.03.12 佳都新太科技股份有限公司 Android实习生2014.03.17-2014.11.06 广东星辉天拓互动娱乐有限公司 Android工程师2014.11.12-至今 广东南方周末新媒体有限公司 Android开发工程师 ##项目经验2012.10 - 2012.12 《小巫新闻Android客户端》2013.05 - 2013.07 《Android简、美音乐播放器》2013.10 - 2013.12 《新浪微博客户端》2013.07 - 2013.09 《Android语音邮箱》2013.11 - 2014.01 《信元会议通手机客户端》2014.01 - 2014.03 《微博整合客户端》2014.04 - 2014.05 《任务系统客户端》2014.07 - 2014.08 《小巫CSDN博客客户端》2014.11 - 2015.02 《南周知道》2015.03 - 2015.6 《茄子》 ##联系方式QQ：659982592开发群：299402133Wechat：whatswwj简书：http://www.jianshu.com/users/dc3bd5a17215/latest_articles知乎：http://www.zhihu.com/people/devilwwj"},{"title":"","date":"2016-12-03T08:30:10.000Z","updated":"2016-12-03T08:30:10.000Z","comments":false,"path":"categories/index.html","permalink":"https://devilwwj.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2016-12-03T08:28:17.000Z","updated":"2016-12-03T08:28:17.000Z","comments":false,"path":"tags/index.html","permalink":"https://devilwwj.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git工作流的一些经验分享","slug":"share-the-experiences-of-git-workflow","date":"2017-02-23T09:10:21.000Z","updated":"2017-02-23T09:26:36.000Z","comments":true,"path":"2017/02/23/share-the-experiences-of-git-workflow/","link":"","permalink":"https://devilwwj.github.io/2017/02/23/share-the-experiences-of-git-workflow/","excerpt":"","text":"笔者使用git有一段时间了，踩过不少坑，这里分享下我在git工作流方面的一些经验。 什么是Git工作流？Git工作流你可以理解为工作中团队成员遵守的一种代码管理方案，在Git中有以下几种工作流方案作为方案指导： 集中式工作流 功能开发工作流 Gitflow工作流 Forking工作流 下面针对性说下每个工作流可能使用到的场景和适用性： 集中式工作流 集中式工作流 这种工作方式跟svn类似，它只有一个master分支，开发者会先把远程的仓库克隆到本地，之后的修改和提交都在本地操作，直到在某个合适的时间点将本地的代码合入到远程master。这种工作流比较适合小团队，因为小团队可能不会太多的协作和合流的动作。 功能开发工作流 功能开发工作流 这种工作流关注功能开发，不直接往master提交代码保证它是稳定并且干净的，而是从master拉取feature分支进行功能开发，团队成员根据分工拉取不同的功能分支来进行不同的功能开发，这样就可以完全隔离开每个人的工作。当功能开发完成后，会向master分支发起Pull Request，只有审核通过的代码才真正允许合入master，这样就加强了团队成员之间的代码交流，也就是我们常说的Code Review。 Gitflow工作流 Gitflow工作流 这个工作流其实也是我们团队采用的工作流，这也是很多团队会采用的工作流，它会相对复杂一点，但它非常适合用来管理大型项目的发布和维护，后面笔者也会详细讲下这一块。贯穿整个开发周期，master和develop分支是一直存在的，master分支可以被视为稳定的分支，而develop分支是相对稳定的分支，特性开发会在feature分支上进行，发布会在release分支上进行，而bug修复则会在hotfix分支上进行。笔者也是花了不少时间才熟练掌握整个工作流，期间遇到不少坑，后面会跟大家分享下。 Forking工作流 Forking工作流 Forking工作流对于开源项目贡献者一定不陌生了，它有一个公开的中央仓库，其他贡献者可以Fork（克隆）这个仓库作为你自己的私有仓库，开源项目维护者可以直接往中央仓库push代码，而代码贡献者只能将代码push到自己的私有仓库，只有项目维护者接受代码贡献者往中央仓库发起的pull request才会真正合入。 小结一下 上面已经大致讲了在git当中的四种比较常见的工作流，都是需要开发者去实践理解的。 关于git工作流，只有选用最合适自己团队的工作流才能有效的提高开发效率，上面提到的一些工作流模式都有各自的适用场景，如何选用适合自己团队的工作流得结合团队成员的实际情况，看团队成员对于工作流的理解程度，还有对于工作流的执行程度。 我们团队的一些实践现在讲下我们团队针对Gitflow的一些实践： master分支 主分支 保持稳定 不允许直接往这个分支提交代码，只允许往这个分支发起merge request 只允许release分支和hotfix分支进行合流 develop分支 开发分支 相对稳定的分支 用于日常开发，包括代码优化、功能性开发 feature分支 特性分支 从develop分支拉取，用于下个迭代版本的功能特性开发 功能开发完毕合并到develop分支 release分支 发布分支 从develop分支拉取 用于回归测试，bug修复 发布完成后打tag并合入master和develop hotfix分支 热更新分支 从develop分支拉取 用于紧急修复上线版本的问题 修复后打tag并合入master和develop 大家可能会发现我们这个跟标准的Gitflow工作流有些差别，其实也没有什么标准不标准的，前面说到要结合团队的实际情况，我们团队对于目前所采用的工作方式都是达成共识的，所以有一些差异并没有关系。 说了这么久，还没有一句git命令，那就让大家感受一下吧（感谢Bugly小色熊整理）： 1). 首先将远程代码拉取到本地 12git clone xxxgit checkout -b develop origin/develop 2).新建feature分支 1git checkout -b feature 3).多人在feature上开发，如果中途需要将develop的变更合入feature，所有人需要将本地的代码变更提交到远程 123git fetch origin git rebase origin/featuregit push origin feature 然后由feature负责人rebase develop分支，删除原来feature分支，重新新建feature分支； 12345git fetch origingit rebase origin/featuregit rebase developgit push origin :featuregit push origin feature 这样可以保证feature保持线性变更； 4).feature开发完成后，所有人需要将本地的代码变更提交到远程 123git fetch origin git rebase origin/featuregit push origin feature 然后由feature负责人rebase develop分支，然后将feature分支合入develop，删除feature； 123456git fetch origingit rebase origin/featuregit rebase developgit checkout developgit merge featuregit push origin :feature 这样可以保证develop保持线性变更，各feature的变更完整可追溯； 5).合入feature后拉出对应的release/feature分支，后续bug修复在release/feature上 12git checkout developgit checkout -b release/feature release/feature分支的同步合并与feature分支相同 6).release/feature分支bug修复完成后，拉取对应的tag推送远程进行发布 12git tag -a v1.0 -m &apos;feature发布&apos;git push origin v1.0 之后将release/feature合入develop分支，然后删除 1234git rebase developgit checkout developgit merge release/featuregit push origin :release/feature 7).发布完成后将release合入master分支，保证master为最新稳定版本（实际操作为发起merge request） 总结本篇文章主要针对笔者工作中对于git工作流的一些理解和实践，目前我们团队也是严格按照这样的工作流来完成日常的开发工作，一个让团队成员认可并且有效的工作流才是最适合我们的工作流，任何规则不是为了限制我们思考，而是为了让工作更加高效有序，尽量减少人为的失误。git是一个博大精深的东西，笔者也是不断在实际应用中去理解它，任何一门技术的学习也是这样，就像程序员常用来装逼的一首诗： 纸上得来终觉浅，绝知此事要躬行。 参考资料：http://blog.jobbole.com/76847/","categories":[{"name":"经验分享","slug":"经验分享","permalink":"https://devilwwj.github.io/categories/经验分享/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://devilwwj.github.io/tags/Git/"}]},{"title":"Bugly热更新SDK你需要知道的一些事","slug":"bugly-android-hotfix-you-should-know","date":"2016-11-28T05:19:58.000Z","updated":"2016-12-03T11:50:01.000Z","comments":true,"path":"2016/11/28/bugly-android-hotfix-you-should-know/","link":"","permalink":"https://devilwwj.github.io/2016/11/28/bugly-android-hotfix-you-should-know/","excerpt":"","text":"Bugly出热更新SDK了？没错，Bugly也出热更新SDK啦，2016.11.25号，我们Bugly也上线了Android版的热更新SDK，大家都知道这一年来热更新被无数次提起，各大厂自主研发的热更新方案层出不穷，下面就列举一些大家比较熟悉的一些热更新方案： 微信开源：Tinker大众点评：Nuwa阿里巴巴：Dexposed阿里巴巴：AndFix美团：Robust 各个方案的优劣性笔者就不在这里做过多讨论了，总的一句话没有最好的，只有最适合自己的。 我们Bugly也是出于高可用性的考虑，Tinker支持动态下发代码、So库以及资源，所以我们最终选择了Tinker方案作为我们SDK的一项能力。 这里有一点需要说明的，Android版的热更新SDK是包含在升级SDK里面的，所以如果你想使用我们提供的热更新能力需要下载对应版本的升级SDK，目前我们在1.2.0版本才开始支持热更新： 热更新SDK 注意：升级SDK自1.2.0起将不再支持以jar包形式集成，我们建议您使用Android studio并且以gradle方式集成。 为什么集成我们Bugly热更新SDK？热更新能力是Bugly为解决开发者紧急修复线上Bug，而无需重新发版让用户无感知就能把问题修复的一项能力。Bugly目前采用微信Tinker的开源方案，开发者只需要集成我们提供的SDK就可以实现自动下载补丁包、合成、并且应用补丁的功能，我们也提供了热更新管理后台让开发者对每个版本的补丁进行管理。 集成我们SDK的好处是显而易见的： 无需关注Tinker是如何合成补丁的 无需自己搭建补丁管理后台 无需考虑后台下发补丁策略的任何事情 无需考虑补丁下载合成的时机，处理后台下发的策略 我们提供了更加方便集成Tinker的方式 我们提供应用升级一站式解决方案 应用升级 如何集成Bugly热更新SDK？ 看文档、看文档、看文档。重要的事情说三遍。Android热更新接入指南 相信接入过Tinker的同学会发现使用Tinker还是有一定门槛的，小白用户第一次使用可能会懵圈，我们Bugly也希望能让第一次接入的同学能顺利使用上热更新，所以建议大家严格按照我们文档的流程来接入，如果遇到任何使用SDK的问题可以及时跟我们反馈（交流群号：130979883），但如果是Tinker插件的使用问题也是建议您认真查看Tinker Wiki。 简单概要说一下整个接入流程： 配置插件依赖（这里包含tinker插件和tinker-support插件的依赖） apply插件（这里可以只配置apply plugin: &#39;com.tencent.bugly.tinker-support&#39;） 集成SDK 集成远程SDK仓库 重新自定义Application、ApplicationLike AndroidManifest配置 混淆配置 测试验证 打基准包安装并上报联网（注：填写唯一的tinkerId） 对基准包的bug修复（可以是Java代码变更，资源的变更） 修改基准包路径、填写补丁包tinkerId、mapping文件路径、resId文件路径 执行tinkerPatchRelease打Release版本补丁包 选择app/build/outputs/patch目录下的补丁包并上传（注：不要选择tinkerPatch目录下的补丁包，不然上传会有问题） 编辑下发补丁规则，点击立即下发 重启基准包，请求补丁策略（SDK会自动下载补丁并合成） 再次重启基准包，检验补丁应用结果 以上是应用补丁的流程，有同学可能会问，如果我想撤回怎么办？这里先解释下我们补丁的几种状态： 下发中 生效中、下发停止 撤回中 下发中：表示你上传一个补丁后，点击立即下发之后的状态，表示后台正在下发补丁策略，补丁包对应的基线版本是可以收到对应的策略的。 生效中、下发停止：表示你已经下发过这个补丁，但因为你上传了新补丁，这个补丁下发会被停止，要注意一个目标版本只运行下发一个补丁。 撤回中：表示你不再下发这个补丁，这个操作是不可逆的，点击撤回，基线版本将不会再收到这个补丁策略。 以上就是Bugly热更新SDK的集成方式一些说明啦，如果还有疑问直接找Bugly-kirito咨询。 一些大家比较关注的问题Q：Bugly热更新会收费么？ A：大家可以放心，我们热更新服务目前是完全免费的。 Q：之前使用Tinker，怎么切换过来使用Bugly？ A： 你只需在dependencies中配置一句代码： 1compile &quot;com.tencent.bugly:crashreport_upgrade:1.2.0&quot; 注释掉以前的配置： 1234// 可选，用于生成application类 //provided(&apos;com.tencent.tinker:tinker-android-anno:1.7.5&apos;) // tinker的核心库 // compile(&apos;com.tencent.tinker:tinker-android-lib:1.7.5&apos;) 插件配置不需要更改，只需要加上我们Bugly额外的tinker-support插件即可： 12345// tinker gradle插件 classpath (&apos;com.tencent.tinker:tinker-patch-gradle-plugin:1.7.5&apos;) // tinkersupport插件 classpath &quot;com.tencent.bugly:tinker-support:1.0.1&quot; 这里建议您不要随便更改插件版本，避免因为插件的更新导致您无法正常生成我们需要的补丁包。 Q：如果我配置了升级策略，又配置了补丁策略，会是怎样的效果？ A：升级策略优先级会高于补丁策略，后台会优先下发升级策略。毕竟你都要升级了，热更新只是帮助你修复bug而已。 Q：我只想使用热更新，不想使用升级？ A：热更新是包含在升级SDK里面的，你可以不配置任何升级策略，只需按照热更新文档集成即可。 Q：是否支持加固模式？ A：tinker是支持加固模式的，但需要你回退到Qzone方案，将usePreGeneratedPatchDex设置为true。 Alt 但要注意Tinker官方的提示： 是否提前生成dex，而非合成的方式。这套方案即回退成Qzone的方案，对于需要使用加固或者多flavor打包(建议使用其他方式生成渠道包)的用户可使用。但是这套方案需要插桩，会造成Dalvik下性能损耗以及Art补丁包可能过大的问题，务必谨慎使用。另外一方面，这种方案在Android N之后可能会产生问题，建议过滤N之后的用户。 Q：是否支持打多Flavor的patch包A：支持的。你需要配置productFlavor（示例）： 123456789productFlavors &#123; xiaomi &#123; applicationId &apos;com.tencent.bugly.hotfix.xiaomi&apos; &#125; yyb &#123; applicationId &apos;com.tencent.bugly.hotfix.yyb&apos; &#125; &#125; 打flavor包，只需要配置构建flavor的目录，其他字段不需要填写（执行tinkerPatchAllFalvorRelease就可以得到所有flavor的包）： flavor路径配置 打flavor的Task 总结&amp;展望关于Bugly热更新SDK你需要知道的一些事情，笔者已经讲完啦，如果你在使用过程中遇到任何问题可以及时跟我们反馈，我们会持续跟进优化SDK和完善接入流程，后续我们会分享更多我们Bugly关于热更新的一些技术和原理上的理解，希望本篇文章能够让使用Bugly热更新SDK的同学和想了解我们热更新的同学的有一些解惑。","categories":[{"name":"Android","slug":"Android","permalink":"https://devilwwj.github.io/categories/Android/"}],"tags":[{"name":"Bugly","slug":"Bugly","permalink":"https://devilwwj.github.io/tags/Bugly/"},{"name":"热更新","slug":"热更新","permalink":"https://devilwwj.github.io/tags/热更新/"},{"name":"Tinker","slug":"Tinker","permalink":"https://devilwwj.github.io/tags/Tinker/"}]}]}